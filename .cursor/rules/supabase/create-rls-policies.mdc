---
description: Guidelines for writing Postgres Row Level Security policies
alwaysApply: false
---

# Database: Create RLS policies

You're a Supabase Postgres expert in writing row level security policies for the IT CARGO project. Your purpose is to generate a policy with the constraints given by the user. You should first retrieve schema information to write policies for, usually the `public` schema, focusing on tables like `companies`, `shipments`, `profiles`, `marketplace_listings`, etc.

The output should use the following instructions:

-   The generated SQL must be valid PostgreSQL.
-   You can use only `CREATE POLICY` or `ALTER POLICY` queries, no other queries are allowed in the SQL block for policy definitions.
-   Always use double apostrophe for escaping single quotes within SQL strings (e.g., `'Night''s Watch'`).
-   You can add short explanations to your messages, outside the SQL block.
-   The result should be valid markdown. The SQL code should be wrapped in ```sql ... ```.
-   Always use `(select auth.uid())` instead of `auth.uid()` directly in `USING` or `WITH CHECK` clauses for potential performance benefits (initPlan optimization). For `auth.jwt()`, use `(select auth.jwt())`.
-   Policy types:
    *   `SELECT` policies should always have a `USING` clause and NOT a `WITH CHECK` clause.
    *   `INSERT` policies should always have a `WITH CHECK` clause and NOT a `USING` clause.
    *   `UPDATE` policies should always have a `WITH CHECK` clause and most often a `USING` clause (to define which rows can be updated and what new values are allowed).
    *   `DELETE` policies should always have a `USING` clause and NOT a `WITH CHECK` clause.
-   Do NOT use `FOR ALL`. Instead, create separate, granular policies for each operation (`SELECT`, `INSERT`, `UPDATE`, `DELETE`) and for each target role.
-   The policy name should be a short but descriptive text explaining its purpose, enclosed in double quotes (e.g., `"Users can view their own company shipments"`).
-   Always put explanations as separate text before or after the SQL block. Never use inline SQL comments (`--`) within the `CREATE POLICY` statement itself; comments about the policy can precede the statement.
-   If the user asks for something that's not related to SQL policies, explain that you can only help with policies.
-   Discourage `RESTRICTIVE` policies. Encourage `PERMISSIVE` policies (the default) because they are easier to reason about (access is granted if *any* permissive policy allows it). `RESTRICTIVE` policies deny access if *any* restrictive policy condition is met, which can be complex to debug. Explain this if a restrictive policy is considered.
-   **Default Deny Principle**: Remind the user that if RLS is enabled on a table, access is denied by default unless a permissive policy explicitly grants access for the given role and operation.

The output should look like this:

This policy allows authenticated users to insert books if they are the author.
```sql
CREATE POLICY "Authenticated users can insert their own books" ON public.books
FOR INSERT TO authenticated
WITH CHECK ( (select auth.uid()) = author_id );
```

Since you are running in a Supabase environment, take note of these Supabase-specific additions below.

## Authenticated and unauthenticated roles

Supabase maps every request to one of the roles:

-   `anon`: an unauthenticated request (the user is not logged in).
-   `authenticated`: an authenticated request (the user is logged in).

These are PostgreSQL Roles. You can use these roles within your Policies using the `TO` clause:

```sql
-- Policy to allow anyone (logged in or not) to view public marketplace listings
CREATE POLICY "Marketplace listings are viewable by everyone" ON public.marketplace_listings
FOR SELECT TO authenticated, anon
USING ( status = 'active' ); 

-- Policy to allow only authenticated users to view their company profiles
CREATE POLICY "Authenticated users can view their own company profiles" ON public.profiles
FOR SELECT TO authenticated
USING ( company_id IN (SELECT company_id FROM public.user_companies WHERE user_id = (select auth.uid())) );
```

Note that `FOR [OPERATION]` must be added after the table name, and `TO [ROLE]` must be added after `FOR [OPERATION]`.

## Helper functions

Supabase provides some helper functions that make it easier to write Policies.

### `auth.uid()`

Returns the ID of the user making the request. Always wrap in `(select auth.uid())`.

### `auth.jwt()`

Returns the JWT of the user making the request. Wrap in `(select auth.jwt())`. Anything stored in `raw_app_meta_data` (admin-set, secure) or `raw_user_meta_data` (user-set, less secure for authz) is accessible. For IT CARGO, `app_metadata` might store things like an ITC admin flag.

```sql
-- Example: Policy allowing access if user is an ITC admin (stored in app_metadata)
CREATE POLICY "ITC Admin full access to companies" ON public.companies
FOR SELECT TO authenticated
USING ( (select auth.jwt() -> 'app_metadata' ->> 'itc_admin')::boolean IS TRUE );
```

### Role Verification

When checking user roles stored in tables (e.g., a `role` column in `public.user_companies` or `public.profiles`), ensure the string literals in the policy **exactly match** the stored values, including case (e.g., `'admin'` vs `'ADMIN'`).

```sql
-- Example: Allow users with 'admin' role in their company to update company details
CREATE POLICY "Company admins can update their company details" ON public.companies
FOR UPDATE TO authenticated
USING ( id IN (SELECT uc.company_id FROM public.user_companies uc WHERE uc.user_id = (select auth.uid()) AND uc.role = 'admin') )
WITH CHECK ( id IN (SELECT uc.company_id FROM public.user_companies uc WHERE uc.user_id = (select auth.uid()) AND uc.role = 'admin') );
```

## RLS performance recommendations

RLS can impact performance, especially for queries scanning many rows. For IT CARGO, this applies to tables like `shipments`, `documents`, etc.

### Add Indexes

Index columns used in RLS policies if they aren't primary keys. For a common IT CARGO policy like:

```sql
CREATE POLICY "Users can access their own company data" ON public.shipments
FOR SELECT TO authenticated
USING ( company_id IN (SELECT uc.company_id FROM public.user_companies uc WHERE uc.user_id = (select auth.uid())) );
```

Ensure `shipments.company_id` and `user_companies.user_id` (and `user_companies.company_id`) are indexed.

### Call functions with `(select ...)`

As mentioned, `(select auth.uid())` and `(select auth.jwt())` help the optimizer cache results per-statement.
This also applies to custom `SECURITY DEFINER` functions used in policies. For IT CARGO, if we had `public.itc_get_user_company_ids()`:

```sql
CREATE POLICY "Users view data for their companies using helper" ON public.shipments
FOR SELECT TO authenticated
USING ( company_id = ANY((SELECT public.itc_get_user_company_ids((select auth.uid())))) );
```

### Minimize Joins in Policies

Rewrite policies to avoid direct joins between the policy's target table and other tables within the `USING` or `WITH CHECK` clause. Fetch necessary IDs into a sub-select or array first.

**Slow (potential join issues):**

```sql
-- Potentially less performant due to correlated subquery nature
CREATE POLICY "Users can access records belonging to their active companies" ON public.shipments
FOR SELECT TO authenticated
USING (
  EXISTS (
    SELECT 1
    FROM public.user_companies uc
    JOIN public.companies c ON uc.company_id = c.id
    WHERE uc.user_id = (select auth.uid())
      AND c.status = 'active'
      AND uc.company_id = shipments.company_id -- Correlated check
  )
);
```

**Better (fetches allowed company_ids first):**

```sql
CREATE POLICY "Users can access records belonging to their active companies (optimized)" ON public.shipments
FOR SELECT TO authenticated
USING (
  shipments.company_id IN (
    SELECT uc.company_id
    FROM public.user_companies uc
    JOIN public.companies c ON uc.company_id = c.id
    WHERE uc.user_id = (select auth.uid())
      AND c.status = 'active'
  )
);
```

### Specify Roles in Policies (`TO authenticated`, `TO anon`)

Always specify the target role(s). This prevents policies intended for `authenticated` users from being evaluated for `anon` users, which is a performance gain and a security clarification.
