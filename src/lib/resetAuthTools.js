/**
 * Herramientas de diagn√≥stico y reinicio de autenticaci√≥n
 * Para resolver problemas de sesi√≥n y autenticaci√≥n en IT CARGO
 * 
 * Este script puede ser ejecutado desde la consola del navegador para:
 * 1. Identificar problemas de autenticaci√≥n
 * 2. Limpiar datos de sesi√≥n corruptos
 * 3. Reiniciar el estado de la aplicaci√≥n
 */

// Herramientas de diagn√≥stico para problemas de autenticaci√≥n

/**
 * Diagnostica problemas de autenticaci√≥n
 */
window.diagnoseAuthIssues = async function() {
  console.log('üîç Iniciando diagn√≥stico completo del sistema de autenticaci√≥n...');
  
  // Revisar variables de entorno
  console.log('\nüìã Verificando variables de entorno:');
  // Accedemos a las variables desde window en lugar de import.meta
  const supabaseUrl = window.VITE_SUPABASE_URL || '';
  const supabaseAnonKey = window.VITE_SUPABASE_ANON_KEY || '';
  
  if (!supabaseUrl) {
    console.error('‚ùå VITE_SUPABASE_URL no est√° definida');
  } else {
    console.log('‚úÖ VITE_SUPABASE_URL est√° definida:', supabaseUrl);
  }
  
  if (!supabaseAnonKey) {
    console.error('‚ùå VITE_SUPABASE_ANON_KEY no est√° definida');
  } else {
    console.log('‚úÖ VITE_SUPABASE_ANON_KEY est√° definida (valor oculto por seguridad)');
  }
  
  // Revisar el localStorage
  console.log('\nüìã Verificando localStorage:');
  try {
    const keys = Object.keys(localStorage);
    console.log('Claves en localStorage:', keys);
    
    // Buscar claves relacionadas con autenticaci√≥n
    const authKeys = keys.filter(key => 
      key.includes('supabase') || 
      key.includes('auth') || 
      key.includes('user') || 
      key.includes('guest')
    );
    
    if (authKeys.length > 0) {
      console.log('üîë Claves de autenticaci√≥n encontradas:', authKeys);
      
      // Mostrar informaci√≥n de cada clave (sin mostrar tokens completos)
      authKeys.forEach(key => {
        try {
          const value = localStorage.getItem(key);
          if (value && value.length > 100) {
            console.log(`- ${key}: ${value.substring(0, 20)}...${value.substring(value.length - 20)} (${value.length} caracteres)`);
          } else {
            console.log(`- ${key}: ${value}`);
          }
        } catch (e) {
          console.error(`- Error al leer ${key}:`, e);
        }
      });
    } else {
      console.warn('‚ö†Ô∏è No se encontraron claves de autenticaci√≥n en localStorage');
    }
  } catch (e) {
    console.error('‚ùå Error al acceder a localStorage:', e);
  }
  
  // Verificar conexi√≥n a Supabase
  console.log('\nüìã Verificando conexi√≥n a Supabase:');
  try {
    // No podemos usar imports din√°micos en la consola, as√≠ que usamos el objeto global
    const supabase = window.supabaseClient;
    if (!supabase) {
      console.error('‚ùå Cliente Supabase no disponible globalmente');
      console.log('Intente ejecutar este script despu√©s de que la aplicaci√≥n se haya cargado completamente');
      return;
    }
    
    const startTime = Date.now();
    const { data, error } = await supabase.auth.getSession();
    const endTime = Date.now();
    
    if (error) {
      console.error('‚ùå Error al verificar sesi√≥n:', error);
    } else {
      console.log(`‚úÖ Conexi√≥n a Supabase OK (${endTime - startTime}ms)`);
      console.log('Sesi√≥n actual:', data?.session ? 'Activa' : 'Inactiva');
    }
  } catch (e) {
    console.error('‚ùå Error al acceder a supabase:', e);
  }
  
  // Verificar rutas de autenticaci√≥n
  console.log('\nüìã Verificando rutas de autenticaci√≥n:');
  try {
    const currentPath = window.location.pathname;
    console.log('Ruta actual:', currentPath);
    
    const lastRoute = localStorage.getItem('lastVisitedRoute');
    console.log('√öltima ruta visitada:', lastRoute || 'No guardada');
  } catch (e) {
    console.error('‚ùå Error al verificar rutas:', e);
  }
  
  // Verificar estado de navegador
  console.log('\nüìã Informaci√≥n del navegador:');
  console.log('User Agent:', navigator.userAgent);
  console.log('Cookies habilitadas:', navigator.cookieEnabled);
  console.log('Online:', navigator.onLine);
  
  console.log('\n‚úÖ Diagn√≥stico completo.');
  
  return {
    supabaseConfig: {
      urlDefined: !!supabaseUrl,
      keyDefined: !!supabaseAnonKey
    },
    storage: {
      available: typeof localStorage !== 'undefined',
      authKeysFound: Object.keys(localStorage || {}).some(key => 
        key.includes('supabase') || 
        key.includes('auth') || 
        key.includes('user')
      )
    }
  };
};

/**
 * Reinicia el estado de autenticaci√≥n
 */
window.resetAuth = function() {
  console.log('üßπ Limpiando datos de autenticaci√≥n...');
  
  // Limpiar localStorage
  try {
    const keys = Object.keys(localStorage);
    const authKeys = keys.filter(key => 
      key.includes('supabase') || 
      key.includes('auth') || 
      key.includes('user') || 
      key.includes('guest')
    );
    
    console.log('Eliminando claves:', authKeys);
    authKeys.forEach(key => localStorage.removeItem(key));
    
    console.log('‚úÖ Datos de autenticaci√≥n limpiados correctamente');
    console.log('üîÑ Recargando p√°gina en 2 segundos...');
    
    setTimeout(() => {
      window.location.href = '/login';
    }, 2000);
  } catch (e) {
    console.error('‚ùå Error al limpiar datos:', e);
  }
};

/**
 * Reparaci√≥n r√°pida para problemas comunes
 */
window.quickFix = function() {
  console.log('üîß Aplicando reparaci√≥n r√°pida...');
  
  try {
    // 1. Eliminar sesiones expiradas o corruptas
    const keys = Object.keys(localStorage);
    const supabaseKeys = keys.filter(key => key.includes('supabase'));
    supabaseKeys.forEach(key => localStorage.removeItem(key));
    
    // 2. Eliminar datos de usuario invitado
    localStorage.removeItem('guest_user');
    localStorage.removeItem('guestUser');
    
    // 3. Restablecer √∫ltima ruta
    localStorage.setItem('lastVisitedRoute', '/dashboard');
    
    console.log('‚úÖ Reparaci√≥n r√°pida aplicada');
    console.log('üîÑ Recargando p√°gina...');
    
    // 4. Recargar para aplicar cambios
    setTimeout(() => {
      window.location.href = '/login';
    }, 1000);
  } catch (e) {
    console.error('‚ùå Error durante la reparaci√≥n:', e);
  }
};

/**
 * Chequeo de estado general
 */
window.checkSystemStatus = async function() {
  console.log('üè• Verificando estado del sistema...');
  
  // 1. Verificar conexi√≥n a internet
  const online = navigator.onLine;
  console.log('Conexi√≥n a internet:', online ? '‚úÖ Conectado' : '‚ùå Desconectado');
  
  if (!online) {
    console.error('‚ùå Sin conexi√≥n a internet. Con√©ctate y vuelve a intentarlo.');
    return;
  }
  
  // 2. Verificar Supabase
  try {
    // Usar cliente global en lugar de import
    const supabase = window.supabaseClient;
    if (!supabase) {
      console.error('‚ùå Cliente Supabase no disponible');
      return;
    }
    
    // Intentar una operaci√≥n b√°sica
    const { error } = await supabase.auth.getSession();
    if (error) {
      console.error('‚ùå Error al comunicarse con Supabase:', error);
    } else {
      console.log('‚úÖ Comunicaci√≥n con Supabase OK');
    }
  } catch (e) {
    console.error('‚ùå Error al verificar Supabase:', e);
  }
  
  // 3. Verificar si hay modo oscuro/claro correcto
  const darkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
  console.log('Tema preferido:', darkMode ? 'Oscuro' : 'Claro');
  
  console.log('‚úÖ Verificaci√≥n completa');
};

/**
 * Exponer el cliente Supabase globalmente para diagn√≥stico
 */
window.exposeSupabaseClient = function() {
  try {
    // Buscar en el estado de React si existe
    const reactRoot = document.querySelector('[data-reactroot]');
    if (reactRoot && reactRoot._reactRootContainer) {
      console.log('Buscando cliente Supabase en el estado de React...');
      // Esto es una aproximaci√≥n y puede no funcionar en todas las versiones de React
    }
    
    console.log('Para exponer correctamente el cliente Supabase, ejecute lo siguiente en su c√≥digo:');
    console.log('window.supabaseClient = supabase; // A√±adir en src/lib/supabase.ts');
  } catch (e) {
    console.error('Error al intentar exponer el cliente Supabase:', e);
  }
};

console.log('üõ†Ô∏è Herramientas de diagn√≥stico cargadas. Use los siguientes comandos en la consola:');
console.log('   ‚Ä¢ diagnoseAuthIssues() - Diagnosticar problemas de autenticaci√≥n');
console.log('   ‚Ä¢ resetAuth() - Reiniciar autenticaci√≥n completamente');
console.log('   ‚Ä¢ quickFix() - Aplicar una reparaci√≥n r√°pida');
console.log('   ‚Ä¢ checkSystemStatus() - Verificar estado general del sistema');
console.log('   ‚Ä¢ exposeSupabaseClient() - Instrucciones para exponer el cliente Supabase'); 